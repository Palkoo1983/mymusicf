
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
import openai
import datetime
import os
import pandas as pd
import uuid

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# üåç MODEL: bej√∂v≈ë megrendel√©s
class SongRequest(BaseModel):
    title: str
    styles: str
    vocal: str
    language: str
    brief: str

openai.api_key = os.getenv("OPENAI_API_KEY", "sk-...")  # helyettes√≠tsd be

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

@app.post("/api/generate_song")
async def generate_song(req: SongRequest):
    song_id = str(uuid.uuid4())
    today = datetime.date.today().isoformat()
    log_path = os.path.join(LOG_DIR, f"excel_log_{today}.xlsx")

    # PROMPT logika ‚Äì csak a loghoz
    prompt = f"√çrj egy {req.styles} st√≠lus√∫ dalt magyar nyelven a k√∂vetkez≈ë t√©ma alapj√°n: {req.brief}\nStrukt√∫ra: 3 versszak √©s 2 refr√©n. Ne haszn√°lj idegen vagy √©rtelmetlen szavakat. A dal c√≠me legyen: {req.title}"

    row = {
        "D√°tum": today,
        "C√≠m": req.title,
        "St√≠lus": req.styles,
        "√ânek": req.vocal,
        "Nyelv": req.language,
        "Le√≠r√°s": req.brief,
        "Prompt": prompt,
        "MP3 #1": "https://suno.fake/1.mp3",
        "MP3 #2": "https://suno.fake/2.mp3"
    }

    # Excel napl√≥z√°s
    try:
        if os.path.exists(log_path):
            df = pd.read_excel(log_path)
            df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)
        else:
            df = pd.DataFrame([row])
        df.to_excel(log_path, index=False)
    except Exception as e:
        print("Excel napl√≥z√°s hiba:", e)

    # Dummy v√°lasz (csak p√©lda, a val√≥di API h√≠v√°sok m√°sok)
    return {
        "lyrics": "Itt a dalsz√∂veg helye...",
        "song_urls": ["https://suno.fake/1.mp3", "https://suno.fake/2.mp3"]
    }

# Excel let√∂lt√©s adminnak
@app.get("/admin/download_excel")
def download_excel(date: str):
    path = os.path.join(LOG_DIR, f"excel_log_{date}.xlsx")
    if os.path.exists(path):
        return FileResponse(path, filename=f"enzenem_log_{date}.xlsx", media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    return JSONResponse(status_code=404, content={"error": "Log not found"})
